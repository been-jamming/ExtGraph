Roadmap after Beta 4 (mostly sorted):

X* demo22: check code logic of RenderMap. I wonder whether it won't do unneeded operations in case everything
is always redrawn...
-> The code logic was convoluted, I couldn't convince myself it was right. Rewritten.

X* Check that PixCollide* are the latest version (further optimization by Jesse Frey).
-> Seems so.

X* Check that the forked grayscale routine is that optimized by Jesse Frey.
-> Yes, and it has further optimizations.

0* Draw(Gray)Buffer-like function with given bytewidth (and height). Another suggestion of Oliver Hoog.

0* Check that all ClipSpriteX8 and GrayClipISpriteX16 work.
(Time to make a testcase/demo ?)

0* Do ALL circle functions do their job properly ?
(Time to make a testcase/demo ?)

-- Beta 5 --

0* Set of functions that modify X8 sprite data:
    * AND/OR/XOR all rows with same mask;
    * AND/OR/XOR sprite data with sprite data of same size;
These are useful functions in their own right.

0* ScaleSprite functions that draw to a sprite instead of a screen. Suggestion of "epsilon".

/* Plane -> plane draw operations.
-> TODO: TRANB/D/L/W (huh, that's a LOT of planes).

/* Fix bugs...
0* Update documentation (update links, document new functions, etc.)
/* Check prototypes in headers.
0* Make reasonably sure that no routine is left out from extgraph.h or extgraph.a.

0* Non-clipped RotateSpriteX8 routine.
-> Ouch, rather hard.

0* Rectangular area operations: Get/AND/OR/XOR/Copy.
Can be emulated with functions that modify X8 sprite data + SpriteX8Get/AND/OR/XOR.

/* demo26: bench generic lines, horiz lines, rectangles, triangles (for now: what about circles, sprites ?) in ExtGraph,
Graphlib, Genlib. Make a fair demo, i.e. use the distinctive features of each library if any, instead of handicapping it.
Some material in a demo of Genlib 0.99.22b (thanks Julien RF for finding it).

0* Make double-buffered versions of the tilemap engine demos. Some material in Kevin's patch.

/* Fix bugs...
0* Update documentation (update links, document new functions, etc.)
/* Check prototypes in headers.
0* Make reasonably sure that no routine is left out from extgraph.h or extgraph.a.

/* rewrite ScaleSprite16/32/64: should use byte reads. Fix graphical glitches on ScaleSprite16, test corner cases !!
0* add ScaleSpriteX8*.
0* Make all ScaleSprite functions in ASM using bit operations, and maybe keep data in a register as long as it's possible.

0* DrawPattern_R (Slimeball).

0* optimize sprite routines:
    0* optimize Gray(Clip)(I)Sprite32_TRANB/TRANW_R the same way as 8 and 16.
    0* Make fast non-clipped GrayISpriteX_Y_R ?

0* Make more X8 routines, especially grayscale ones, including transparencies.
0* Make (Gray)(Clip)ISpriteX16_AND/MASK/OR/RPLC/TRANB/TRANW/XOR_R. Make a copy of demo6 with X16 routines ?
0* Make more Gray(Clip)SingleSprite routines.

0* fastsrb:
    0* Macros for Put with callback, to make programmers' life a bit easier.
    0* Make clipped routines.
    0* demo23: grayscale fastsrb. Simplified Phoenix Platinum / Krypton / Venus. 10 16x16 ships (of which 2 overlap)
drawn with clipped routines, in TRANW mode, over a background that scrolls very often (every or every other AI5 tick).
Redraw each frame if not using fastsrb functions, redraw only when needed otherwise. No waiting loop. Count the number of
frames during 300 AI5 ticks.

0* More things in demo26 ?

0* __regparm__ grayscale utilities, while rewriting them all into GNU as ASM.

/* Generic font routines, OS or custom. Two sets of pointers, one should always contain the OS fonts (i.e., mandatory
SetupCharSet).

/* Lines, triangles, circles, etc:
    0* make DrawMultiHLines; reimplement DrawMultiLines, A_NORMAL, A_XOR and A_REVERSE modes.
    Note: an algorithm for circles, triangles and lines could be: use the stack (max 2*128 bytes) to store endpoints,
    call DrawMultiHLines.
    0* "Extremely Fast Line Algorithm" (EFLA) by Po-Han Lin: what does "Freely useable in non-commercial applications as
long as credits to Po-Han Lin and link to http://www.edepot.com is provided in source code AND CAN BE SEEN IN COMPILED
EXECUTABLE [emphasis mine]" mean exactly ? Anyway, while the C version of EFLA which calls a subroutine to plot a pixel
is faster than the C version of Bresenham, it's not sure that the ASM version of EFLA would be faster than the ASM
version of Bresenham.

0* Preshifted 8x8 ?


/* Transition effects: waiting loops in most of them, one routine makes one effect + demo18. Unless otherwise noted,
modes are invert (B/W - gray), FOTB (B/W - gray), FOTW (B/W - gray), FI (B/W - gray). B/W routines: add "BW" in front of
name.
    /* the transition effect at the very beginning of TI-Chess: outer border -> center and vice-versa, FOTB/FOTW,
160x100 and 240x128. Name: "ZapMinimize"/"ZapMaximize". Take code from TI-Hex.
    0* rectangles outlined concentriques, B/W et couleurs COLOR_WHITE/LIGHTGRAY/DARKGRAY/BLACK, extérieur vers intérieur
et inversement, 160x100 et 240x128: "RectMinimize"/"RectMaximize".
    /* dissolve effect: modes habituels + effet de Ice Hockey 68k (doublebuffering, accès direct aux variables internes),
240x128 seulement. Distinguer (sauf l'effet de Ice Hockey 68k ?) des versions "Faster" et "Slower" en ASM ("Slower" ayant
une boucle d'attente).
    0* effet code-barres basé sur un LFSR, horizontal et vertical (8 bits), 160xn, 240xn (nmax=255):
"HLines/VLines160/240_R". Mettre un paramètre spécifiant la première colonne (le LFSR le permet a priori).
    /* spiral X8X8, CW et CCW, extérieur -> intérieur et inversement, début top left et top right.
      CWS2: sequence down - left - up - right, inner  -> outer pixels.
      CCWS1: sequence left - down - right - up, outer -> inner pixels.
      CCWS2: sequence down - right - up - left, inner -> outer pixels.
    /* classiques X8xn L -> R, R -> L, T -> B, B -> T, également en colonnes de 8 pixels. Augmenter légèrement wait, pour
voir si c'est moins moche.
    0* fire similaire à celui de Krypton I (probablement sprite-based et peut-être même tile-based) 240x128, B -> T,
T -> B, R -> L, L -> R. Celui de TICT est trop gros... squale92 ?
    /* AND, OR, XOR mask de 32 bits vers planes 160x100, 240x128: "AND/OR/XORPlane(s)WithMask160x100/240x128_R".
    0* L'effet de transition de Hawk (en ASM) et sa version horizontale.
    0* Modification de l'effet "Arcs de cercle" ("Search").



Always check:
* __regparm__ should use only d0-d3/a0-a1, except in the tilemap engine.
* all parameters sprite, mask, maskval should be unsigned.
* all parameters plane should be void *.
* all constant parameters should be const...
* using "extern" and "register" in prototypes is not usually necessary.
* a parameter which can be negative shouldn't be declared unsigned...
